---
import CharacterCard from "../components/CharacterCard.astro";
import NavigationBar from "../components/NavigationBar.astro";
import NavigationButton from "../components/NavigationButton.astro";
import Layout from "../layouts/Layout.astro";
import type { PaginatedResponse } from "../types/swapi/paginated";
import type { People } from "../types/swapi/people";

const PAGE_SIZE = 10;

const pagination = Astro.url.searchParams.get("page") || "";
const paginationInt = pagination ? parseInt(pagination) : 0;
const data = await fetch(
  `${import.meta.env.API_URL}/people/${pagination ? `?page=${pagination}` : ""}`
).then((res) => res.json() as Promise<PaginatedResponse<People>>);

const lastPage = Math.ceil(data.count / PAGE_SIZE);
const parsedResults = data.results.map((result) => {
  return {
    ...result,
    url: result.url.split("/api/").at(-1),
    id: result.url.split("/people").at(-1)?.replaceAll("/", ""),
  };
});

const calculateLastItemPage = (page: number, pageSize: number) => {
  return page ? page * pageSize : pageSize;
};

const pageStart = paginationInt ? (paginationInt - 1) * PAGE_SIZE + 1 : 1;
const pageEnd =
  lastPage === paginationInt
    ? data.count
    : calculateLastItemPage(paginationInt, PAGE_SIZE);

const parsedData = {
  count: data.count,
  next: data.next
    ? `/?page=${new URL(data.next).searchParams.get("page")}`
    : null,
  previous: data.previous
    ? `/?page=${new URL(data.previous).searchParams.get("page")}`
    : null,
  results: parsedResults,
} as PaginatedResponse<People & { id: string }>;
console.log(typeof parsedData.count);
---

<Layout title="Star Wars Characters">
  <ul class="grid grid-cols-6 gap-8 md:grid-cols-12">
    {
      parsedData.results.map((character) => {
        return (
          <li class="col-span-3">
            <a href={character.url}>
              <CharacterCard character={character} />
            </a>
          </li>
        );
      })
    }
  </ul>
  <!-- Pagination bar -->
  <NavigationBar
    pageStart={pageStart}
    pageEnd={pageEnd}
    pageTotal={parsedData.count}
  >
    {
      [
        {
          href: "/",
          disabled: !Boolean(parsedData.previous),
          label: "First",
        },
        {
          href: parsedData.previous,
          disabled: !Boolean(parsedData.previous),
          label: "Previous",
        },
        {
          href: parsedData.next,
          disabled: !Boolean(parsedData.next),
          label: "Next",
        },
        {
          href: `/?page=${lastPage}`,
          disabled: !Boolean(parsedData.next),
          label: "Last",
        },
      ].map(({ label, ...item }) => (
        <NavigationButton {...item}>{label}</NavigationButton>
      ))
    }
  </NavigationBar>
</Layout>
